---
import Layout from '../layouts/Layout.astro';
---

<Layout title="HerzZeit - Das Familienspiel der Liebe">
  <main class="container mx-auto px-4 py-8">
    <!-- Header -->
    <div class="text-center mb-8">
      <h1 class="text-4xl md:text-6xl font-bold text-purple-800 mb-4">
        💝 HerzZeit 💝
      </h1>
      <p class="text-lg text-purple-600 mb-2">Das Familienspiel der Liebe</p>
      <p class="text-sm text-gray-600">2-10 Spieler • 20-45 Minuten • ab 5 Jahren</p>
    </div>

    <!-- Game Container -->
    <div class="max-w-4xl mx-auto">
      <!-- Game Setup -->
      <div id="setup-screen" class="bg-white rounded-xl shadow-lg p-6 mb-6">
        <h2 class="text-2xl font-bold text-center mb-6 text-purple-800">Spiel vorbereiten</h2>
        
        <div class="grid md:grid-cols-2 gap-6 mb-6">
          <div class="bg-pink-50 p-4 rounded-lg">
            <h3 class="font-semibold text-purple-700 mb-2">👪 Spieler</h3>
            <div class="flex items-center space-x-2">
              <button id="decrease-players" class="bg-purple-500 text-white px-3 py-1 rounded hover:bg-purple-600 transition-colors">-</button>
              <span id="player-count" class="text-xl font-bold text-purple-800 mx-3">2</span>
              <button id="increase-players" class="bg-purple-500 text-white px-3 py-1 rounded hover:bg-purple-600 transition-colors">+</button>
            </div>
          </div>
          
          <div class="bg-pink-50 p-4 rounded-lg">
            <h3 class="font-semibold text-purple-700 mb-2">⏱️ Spieldauer</h3>
            <select id="game-duration" class="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-purple-500">
              <option value="20">20 Minuten</option>
              <option value="30" selected>30 Minuten</option>
              <option value="45">45 Minuten</option>
            </select>
          </div>
        </div>

        <div class="text-center">
          <button id="start-game" class="bg-gradient-to-r from-pink-500 to-purple-600 text-white px-8 py-3 rounded-full text-lg font-semibold hover:from-pink-600 hover:to-purple-700 transform hover:scale-105 transition-all duration-200 shadow-lg">
            Spiel starten! 🎉
          </button>
        </div>
      </div>

      <!-- Game Screen -->
      <div id="game-screen" class="hidden">
        <!-- Game Header -->
        <div class="bg-white rounded-xl shadow-lg p-4 mb-6">
          <div class="flex justify-between items-center">
            <div class="flex items-center space-x-4">
              <div class="text-center">
                <div class="text-sm text-gray-600">Aktueller Spieler</div>
                <div id="current-player" class="font-bold text-purple-800">Spieler 1</div>
              </div>
              <div class="text-center">
                <div class="text-sm text-gray-600">Karten gezogen</div>
                <div id="cards-drawn" class="font-bold text-purple-800">0</div>
              </div>
            </div>
            
            <div class="text-center">
              <div class="text-sm text-gray-600">Verbleibende Zeit</div>
              <div id="timer" class="font-bold text-purple-800 text-xl">30:00</div>
            </div>
          </div>
        </div>

        <!-- Card Display -->
        <div id="card-container" class="bg-white rounded-xl shadow-lg p-8 mb-6 text-center">
          <div id="herzglas" class="cursor-pointer">
            <div class="text-8xl mb-4">🏺</div>
            <h3 class="text-2xl font-bold text-purple-800 mb-2">Herzglas</h3>
            <p class="text-gray-600 mb-4">Klicke auf das Herzglas, um eine Karte zu ziehen!</p>
            <button id="draw-card" class="bg-gradient-to-r from-pink-500 to-purple-600 text-white px-6 py-3 rounded-full font-semibold hover:from-pink-600 hover:to-purple-700 transform hover:scale-105 transition-all duration-200">
              Karte ziehen 🎴
            </button>
          </div>

          <div id="card-display" class="hidden">
            <div id="card-content" class="text-center">
              <!-- Card content will be inserted here -->
            </div>
            <div class="mt-6 space-x-4">
              <button id="next-player" class="bg-green-500 text-white px-6 py-3 rounded-full font-semibold hover:bg-green-600 transform hover:scale-105 transition-all duration-200">
                Nächster Spieler 👉
              </button>
              <button id="draw-another" class="bg-blue-500 text-white px-6 py-3 rounded-full font-semibold hover:bg-blue-600 transform hover:scale-105 transition-all duration-200">
                Noch eine Karte 🎴
              </button>
            </div>
          </div>
        </div>

        <!-- Game Controls -->
        <div class="bg-white rounded-xl shadow-lg p-4 mb-6">
          <div class="flex justify-center space-x-4">
            <button id="pause-game" class="bg-yellow-500 text-white px-4 py-2 rounded-full font-semibold hover:bg-yellow-600 transition-colors">
              ⏸️ Pausieren
            </button>
            <button id="end-game" class="bg-red-500 text-white px-4 py-2 rounded-full font-semibold hover:bg-red-600 transition-colors">
              🛑 Spiel beenden
            </button>
          </div>
        </div>
      </div>

      <!-- End Game Screen -->
      <div id="end-screen" class="hidden bg-white rounded-xl shadow-lg p-8 text-center">
        <h2 class="text-3xl font-bold text-purple-800 mb-4">🌟 Spiel beendet! 🌟</h2>
        <p class="text-lg text-gray-600 mb-6">Zeit für die Liebessterne!</p>
        
        <div class="bg-pink-50 p-6 rounded-lg mb-6">
          <h3 class="text-xl font-semibold text-purple-700 mb-4">Liebessterne vergeben</h3>
          <p class="text-gray-600 mb-4">Jeder darf jetzt einen "Liebesstern" vergeben - ein kleines Lob oder Danke an jemanden am Tisch.</p>
          <div class="text-6xl mb-4">⭐</div>
          <p class="text-sm text-gray-500">Nehmt euch Zeit, um einander zu würdigen und zu danken!</p>
        </div>

        <div class="space-y-4">
          <div class="bg-purple-50 p-4 rounded-lg">
            <h4 class="font-semibold text-purple-700 mb-2">🎯 Heute haben wir erreicht:</h4>
            <ul class="text-sm text-gray-600 space-y-1">
              <li>• Echte Gespräche geführt</li>
              <li>• Jedes Familienmitglied gesehen und geschätzt</li>
              <li>• Zusammen gelacht und Liebe geteilt</li>
              <li>• Unsere Verbindung gestärkt</li>
            </ul>
          </div>

          <button id="new-game" class="bg-gradient-to-r from-pink-500 to-purple-600 text-white px-8 py-3 rounded-full text-lg font-semibold hover:from-pink-600 hover:to-purple-700 transform hover:scale-105 transition-all duration-200 shadow-lg">
            Neues Spiel starten 🎉
          </button>
        </div>
      </div>
    </div>

    <!-- Rules Modal -->
    <div id="rules-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
      <div class="bg-white rounded-xl p-6 max-w-2xl mx-4 max-h-96 overflow-y-auto">
        <h3 class="text-2xl font-bold text-purple-800 mb-4">🧠 Spielregeln</h3>
        <div class="space-y-3 text-gray-700">
          <p>1. Jeder zieht reihum eine Karte aus dem "Herzglas"</p>
          <p>2. Die gezogene Aufgabe oder Frage wird vorgelesen</p>
          <p>3. Alle hören einander gut zu und zeigen Wertschätzung</p>
          <p>4. Kein Auslachen oder negatives Kommentieren</p>
          <p>5. Am Ende darf jeder einen "Liebesstern" vergeben</p>
        </div>
        <button id="close-rules" class="mt-4 bg-purple-500 text-white px-4 py-2 rounded-full hover:bg-purple-600 transition-colors">
          Verstanden!
        </button>
      </div>
    </div>

    <!-- Rules Button -->
    <div class="fixed bottom-4 right-4">
      <button id="show-rules" class="bg-purple-500 text-white px-4 py-2 rounded-full shadow-lg hover:bg-purple-600 transition-colors">
        📖 Regeln
      </button>
    </div>
  </main>
</Layout>

<script>
  // Import card data
  import { shuffleCards, type Card } from '../data/cards.ts';

  // Game state
  let gameState = {
    players: 2,
    currentPlayer: 1,
    duration: 30,
    timeLeft: 30 * 60, // in seconds
    isRunning: false,
    isPaused: false,
    cards: shuffleCards(),
    cardIndex: 0,
    cardsDrawn: 0,
    timer: null as NodeJS.Timeout | null
  };

  // DOM elements
  const setupScreen = document.getElementById('setup-screen')!;
  const gameScreen = document.getElementById('game-screen')!;
  const endScreen = document.getElementById('end-screen')!;
  const rulesModal = document.getElementById('rules-modal')!;
  
  const decreasePlayersBtn = document.getElementById('decrease-players')!;
  const increasePlayersBtn = document.getElementById('increase-players')!;
  const playerCountSpan = document.getElementById('player-count')!;
  const gameDurationSelect = document.getElementById('game-duration') as HTMLSelectElement;
  const startGameBtn = document.getElementById('start-game')!;
  
  const currentPlayerSpan = document.getElementById('current-player')!;
  const cardsDrawnSpan = document.getElementById('cards-drawn')!;
  const timerSpan = document.getElementById('timer')!;
  
  const herzglas = document.getElementById('herzglas')!;
  const cardDisplay = document.getElementById('card-display')!;
  const cardContent = document.getElementById('card-content')!;
  const drawCardBtn = document.getElementById('draw-card')!;
  const nextPlayerBtn = document.getElementById('next-player')!;
  const drawAnotherBtn = document.getElementById('draw-another')!;
  
  const pauseGameBtn = document.getElementById('pause-game')!;
  const endGameBtn = document.getElementById('end-game')!;
  const newGameBtn = document.getElementById('new-game')!;
  
  const showRulesBtn = document.getElementById('show-rules')!;
  const closeRulesBtn = document.getElementById('close-rules')!;

  // Event listeners
  decreasePlayersBtn.addEventListener('click', () => {
    if (gameState.players > 2) {
      gameState.players--;
      playerCountSpan.textContent = gameState.players.toString();
    }
  });

  increasePlayersBtn.addEventListener('click', () => {
    if (gameState.players < 10) {
      gameState.players++;
      playerCountSpan.textContent = gameState.players.toString();
    }
  });

  gameDurationSelect.addEventListener('change', () => {
    gameState.duration = parseInt(gameDurationSelect.value);
  });

  startGameBtn.addEventListener('click', startGame);
  drawCardBtn.addEventListener('click', drawCard);
  nextPlayerBtn.addEventListener('click', nextPlayer);
  drawAnotherBtn.addEventListener('click', drawCard);
  pauseGameBtn.addEventListener('click', togglePause);
  endGameBtn.addEventListener('click', endGame);
  newGameBtn.addEventListener('click', newGame);
  showRulesBtn.addEventListener('click', () => rulesModal.classList.remove('hidden'));
  closeRulesBtn.addEventListener('click', () => rulesModal.classList.add('hidden'));

  // Click outside modal to close
  rulesModal.addEventListener('click', (e) => {
    if (e.target === rulesModal) {
      rulesModal.classList.add('hidden');
    }
  });

  function startGame() {
    gameState.timeLeft = gameState.duration * 60;
    gameState.isRunning = true;
    gameState.isPaused = false;
    gameState.currentPlayer = 1;
    gameState.cardIndex = 0;
    gameState.cardsDrawn = 0;
    gameState.cards = shuffleCards();
    
    setupScreen.classList.add('hidden');
    gameScreen.classList.remove('hidden');
    endScreen.classList.add('hidden');
    
    updateDisplay();
    startTimer();
  }

  function drawCard() {
    if (gameState.cardIndex >= gameState.cards.length) {
      gameState.cards = shuffleCards();
      gameState.cardIndex = 0;
    }
    
    const card = gameState.cards[gameState.cardIndex];
    gameState.cardIndex++;
    gameState.cardsDrawn++;
    
    displayCard(card);
    herzglas.classList.add('hidden');
    cardDisplay.classList.remove('hidden');
    
    updateDisplay();
  }

  function displayCard(card: Card) {
    const typeLabels = {
      'herzensfrage': 'Herzensfrage',
      'liebesaktion': 'Liebesaktion',
      'lustige-aufgabe': 'Lustige Aufgabe'
    };
    
    const typeColors = {
      'herzensfrage': 'bg-pink-100 border-pink-300 text-pink-800',
      'liebesaktion': 'bg-purple-100 border-purple-300 text-purple-800',
      'lustige-aufgabe': 'bg-yellow-100 border-yellow-300 text-yellow-800'
    };
    
    cardContent.innerHTML = `
      <div class="text-6xl mb-4">${card.icon}</div>
      <div class="inline-block px-4 py-2 rounded-full text-sm font-semibold mb-4 ${typeColors[card.type]} border-2">
        ${typeLabels[card.type]}
      </div>
      <p class="text-lg text-gray-800 font-medium leading-relaxed">${card.text}</p>
    `;
  }

  function nextPlayer() {
    gameState.currentPlayer = (gameState.currentPlayer % gameState.players) + 1;
    herzglas.classList.remove('hidden');
    cardDisplay.classList.add('hidden');
    updateDisplay();
  }

  function updateDisplay() {
    currentPlayerSpan.textContent = `Spieler ${gameState.currentPlayer}`;
    cardsDrawnSpan.textContent = gameState.cardsDrawn.toString();
    
    const minutes = Math.floor(gameState.timeLeft / 60);
    const seconds = gameState.timeLeft % 60;
    timerSpan.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
  }

  function startTimer() {
    if (gameState.timer) {
      clearInterval(gameState.timer);
    }
    
    gameState.timer = setInterval(() => {
      if (!gameState.isPaused && gameState.isRunning) {
        gameState.timeLeft--;
        updateDisplay();
        
        if (gameState.timeLeft <= 0) {
          endGame();
        }
      }
    }, 1000);
  }

  function togglePause() {
    gameState.isPaused = !gameState.isPaused;
    pauseGameBtn.textContent = gameState.isPaused ? '▶️ Fortsetzen' : '⏸️ Pausieren';
  }

  function endGame() {
    gameState.isRunning = false;
    if (gameState.timer) {
      clearInterval(gameState.timer);
    }
    
    gameScreen.classList.add('hidden');
    endScreen.classList.remove('hidden');
  }

  function newGame() {
    gameState = {
      players: 2,
      currentPlayer: 1,
      duration: 30,
      timeLeft: 30 * 60,
      isRunning: false,
      isPaused: false,
      cards: shuffleCards(),
      cardIndex: 0,
      cardsDrawn: 0,
      timer: null
    };
    
    playerCountSpan.textContent = '2';
    gameDurationSelect.value = '30';
    pauseGameBtn.textContent = '⏸️ Pausieren';
    
    endScreen.classList.add('hidden');
    setupScreen.classList.remove('hidden');
    
    herzglas.classList.remove('hidden');
    cardDisplay.classList.add('hidden');
  }

  // Initialize display
  updateDisplay();
</script>
